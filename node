NUMA的内存分配策略有四种：

1.缺省(default)：总是在本地节点分配（分配在当前进程运行的节点上）

2.绑定(bind)：强制分配到指定一系列节点上

3.交叉(interleave)：在所有节点或者指定的节点上交织分配

4.优先(preferred)：在指定节点上分配，失败则在其他节点上分配

bind与prefered区别是，在特定numa node上分配内存失败时，bind策略会直接报错返回失败信息，而preferred策略会回滚，再到其他的numa node上分配内存。使用bind策略会由于swapping，导致早期内存不足、时延上升。

每个进程（进程策略）或者每个内存区域都可以配置策略。子进程可以通过fork继承父进程的进程策略。在进程的上下文环境中，进程策略可以应用在所有的内存分配。这包括了由系统调用产生的内核的内存分配、文件缓存。中断通常在当前节点上分配内存。进程策略也通常应用在内核分配内存页的过程中。

每个内存区域策略也被称为VMA策略，它允许进程为地址空间内的内存块设置策略。内存区域策略相比进程策略优先级更高。内存区域策略最大的优势就是可以在分配内存之前生效。当前，只支持匿名进程内存、SYSV共享内存、shmem和tmpfs映射、巨页文件系统（hugetlbfs）。针对共享内存配置的策略会持续到共享内存区域或文件被删除。


当通过调整持久性巨页数时nr_hugepages_mempolicy，可以使用任何内存策略模式 - 绑定，首选，本地或交织。对持久性大页面分配产生的影响如下：

1.无论是内存策略模式，固定的大页面将分布在内存策略中指定的节点或节点上，就像“interleave”一样指定了node。但是，如果策略中的某个节点没有为大页面包含足够的连续内存，则分配将不会“回退”到具有足够连续内存的最近邻居节点。这样做会导致巨大页面池分布不平衡，或者可能导致在任务内存策略不允许的节点上分配持久性大页面。
2.可以使用绑定或交织策略指定一个或多个节点。如果在首选策略指定了多个节点，则从最小节点的数字开始使用。本地策略将在构造nodes_allowed掩码时选择运行任务的节点。为了使本地策略具有确定性，必须将任务绑定到单个节点中的cpu或cpus。否则，任务可以在启动后随时迁移到其他节点，结果节点将是不确定的。因此，本地策略对此目的不是很有用。任何其他的内存策略可用于指定单个节点。
3.掩码允许的节点将从任何非默认任务内存策略派生，无论此策略是由任务本身还是由其祖先明确设置的。例如numactl。这意味着这个任务如果从具有非默认策略的shell调用，则将使用该策略。可以使用numactl --interleave或--membind [-m]指定“all”的节点列表，以实现系统或cpuset中所有节点的交叉。
4.任何内存策略指定的任务--例如，使用numactl任务运行时将受任意的cpuset资源限制的约束。因此，在具有系统节点子集的cpuset中运行非默认策略的任务将无法在cpuset之外分配大页面，而无需先移动到包含所有所需节点的cpuset。
5.启动时大页面分配尝试在具有内存的所有在线节点上分配所请求数量的大页面。







