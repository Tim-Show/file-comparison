
a.out：     文件格式 elf64-x86-64


Disassembly of section .init:

00000000000007f8 <_init>:
 7f8:	48 83 ec 08          	sub    $0x8,%rsp
 7fc:	48 8b 05 e5 17 20 00 	mov    0x2017e5(%rip),%rax        # 201fe8 <__gmon_start__>
 803:	48 85 c0             	test   %rax,%rax
 806:	74 02                	je     80a <_init+0x12>
 808:	ff d0                	callq  *%rax
 80a:	48 83 c4 08          	add    $0x8,%rsp
 80e:	c3                   	retq   

Disassembly of section .plt:

0000000000000810 <.plt>:
 810:	ff 35 42 17 20 00    	pushq  0x201742(%rip)        # 201f58 <_GLOBAL_OFFSET_TABLE_+0x8>
 816:	ff 25 44 17 20 00    	jmpq   *0x201744(%rip)        # 201f60 <_GLOBAL_OFFSET_TABLE_+0x10>
 81c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000000820 <free@plt>:
 820:	ff 25 42 17 20 00    	jmpq   *0x201742(%rip)        # 201f68 <free@GLIBC_2.2.5>
 826:	68 00 00 00 00       	pushq  $0x0
 82b:	e9 e0 ff ff ff       	jmpq   810 <.plt>

0000000000000830 <strncpy@plt>:
 830:	ff 25 3a 17 20 00    	jmpq   *0x20173a(%rip)        # 201f70 <strncpy@GLIBC_2.2.5>
 836:	68 01 00 00 00       	pushq  $0x1
 83b:	e9 d0 ff ff ff       	jmpq   810 <.plt>

0000000000000840 <strncmp@plt>:
 840:	ff 25 32 17 20 00    	jmpq   *0x201732(%rip)        # 201f78 <strncmp@GLIBC_2.2.5>
 846:	68 02 00 00 00       	pushq  $0x2
 84b:	e9 c0 ff ff ff       	jmpq   810 <.plt>

0000000000000850 <strcpy@plt>:
 850:	ff 25 2a 17 20 00    	jmpq   *0x20172a(%rip)        # 201f80 <strcpy@GLIBC_2.2.5>
 856:	68 03 00 00 00       	pushq  $0x3
 85b:	e9 b0 ff ff ff       	jmpq   810 <.plt>

0000000000000860 <puts@plt>:
 860:	ff 25 22 17 20 00    	jmpq   *0x201722(%rip)        # 201f88 <puts@GLIBC_2.2.5>
 866:	68 04 00 00 00       	pushq  $0x4
 86b:	e9 a0 ff ff ff       	jmpq   810 <.plt>

0000000000000870 <fclose@plt>:
 870:	ff 25 1a 17 20 00    	jmpq   *0x20171a(%rip)        # 201f90 <fclose@GLIBC_2.2.5>
 876:	68 05 00 00 00       	pushq  $0x5
 87b:	e9 90 ff ff ff       	jmpq   810 <.plt>

0000000000000880 <strlen@plt>:
 880:	ff 25 12 17 20 00    	jmpq   *0x201712(%rip)        # 201f98 <strlen@GLIBC_2.2.5>
 886:	68 06 00 00 00       	pushq  $0x6
 88b:	e9 80 ff ff ff       	jmpq   810 <.plt>

0000000000000890 <__stack_chk_fail@plt>:
 890:	ff 25 0a 17 20 00    	jmpq   *0x20170a(%rip)        # 201fa0 <__stack_chk_fail@GLIBC_2.4>
 896:	68 07 00 00 00       	pushq  $0x7
 89b:	e9 70 ff ff ff       	jmpq   810 <.plt>

00000000000008a0 <printf@plt>:
 8a0:	ff 25 02 17 20 00    	jmpq   *0x201702(%rip)        # 201fa8 <printf@GLIBC_2.2.5>
 8a6:	68 08 00 00 00       	pushq  $0x8
 8ab:	e9 60 ff ff ff       	jmpq   810 <.plt>

00000000000008b0 <memset@plt>:
 8b0:	ff 25 fa 16 20 00    	jmpq   *0x2016fa(%rip)        # 201fb0 <memset@GLIBC_2.2.5>
 8b6:	68 09 00 00 00       	pushq  $0x9
 8bb:	e9 50 ff ff ff       	jmpq   810 <.plt>

00000000000008c0 <strcmp@plt>:
 8c0:	ff 25 f2 16 20 00    	jmpq   *0x2016f2(%rip)        # 201fb8 <strcmp@GLIBC_2.2.5>
 8c6:	68 0a 00 00 00       	pushq  $0xa
 8cb:	e9 40 ff ff ff       	jmpq   810 <.plt>

00000000000008d0 <malloc@plt>:
 8d0:	ff 25 ea 16 20 00    	jmpq   *0x2016ea(%rip)        # 201fc0 <malloc@GLIBC_2.2.5>
 8d6:	68 0b 00 00 00       	pushq  $0xb
 8db:	e9 30 ff ff ff       	jmpq   810 <.plt>

00000000000008e0 <fopen@plt>:
 8e0:	ff 25 e2 16 20 00    	jmpq   *0x2016e2(%rip)        # 201fc8 <fopen@GLIBC_2.2.5>
 8e6:	68 0c 00 00 00       	pushq  $0xc
 8eb:	e9 20 ff ff ff       	jmpq   810 <.plt>

00000000000008f0 <getline@plt>:
 8f0:	ff 25 da 16 20 00    	jmpq   *0x2016da(%rip)        # 201fd0 <getline@GLIBC_2.2.5>
 8f6:	68 0d 00 00 00       	pushq  $0xd
 8fb:	e9 10 ff ff ff       	jmpq   810 <.plt>

Disassembly of section .plt.got:

0000000000000900 <__cxa_finalize@plt>:
 900:	ff 25 f2 16 20 00    	jmpq   *0x2016f2(%rip)        # 201ff8 <__cxa_finalize@GLIBC_2.2.5>
 906:	66 90                	xchg   %ax,%ax

Disassembly of section .text:

0000000000000910 <_start>:
     910:	31 ed                	xor    %ebp,%ebp
     912:	49 89 d1             	mov    %rdx,%r9
     915:	5e                   	pop    %rsi
     916:	48 89 e2             	mov    %rsp,%rdx
     919:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
     91d:	50                   	push   %rax
     91e:	54                   	push   %rsp
     91f:	4c 8d 05 5a 0c 00 00 	lea    0xc5a(%rip),%r8        # 1580 <__libc_csu_fini>
     926:	48 8d 0d e3 0b 00 00 	lea    0xbe3(%rip),%rcx        # 1510 <__libc_csu_init>
     92d:	48 8d 3d 89 06 00 00 	lea    0x689(%rip),%rdi        # fbd <main>
     934:	ff 15 a6 16 20 00    	callq  *0x2016a6(%rip)        # 201fe0 <__libc_start_main@GLIBC_2.2.5>
     93a:	f4                   	hlt    
     93b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000000940 <deregister_tm_clones>:
     940:	48 8d 3d c9 16 20 00 	lea    0x2016c9(%rip),%rdi        # 202010 <__TMC_END__>
     947:	55                   	push   %rbp
     948:	48 8d 05 c1 16 20 00 	lea    0x2016c1(%rip),%rax        # 202010 <__TMC_END__>
     94f:	48 39 f8             	cmp    %rdi,%rax
     952:	48 89 e5             	mov    %rsp,%rbp
     955:	74 19                	je     970 <deregister_tm_clones+0x30>
     957:	48 8b 05 7a 16 20 00 	mov    0x20167a(%rip),%rax        # 201fd8 <_ITM_deregisterTMCloneTable>
     95e:	48 85 c0             	test   %rax,%rax
     961:	74 0d                	je     970 <deregister_tm_clones+0x30>
     963:	5d                   	pop    %rbp
     964:	ff e0                	jmpq   *%rax
     966:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
     96d:	00 00 00 
     970:	5d                   	pop    %rbp
     971:	c3                   	retq   
     972:	0f 1f 40 00          	nopl   0x0(%rax)
     976:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
     97d:	00 00 00 

0000000000000980 <register_tm_clones>:
     980:	48 8d 3d 89 16 20 00 	lea    0x201689(%rip),%rdi        # 202010 <__TMC_END__>
     987:	48 8d 35 82 16 20 00 	lea    0x201682(%rip),%rsi        # 202010 <__TMC_END__>
     98e:	55                   	push   %rbp
     98f:	48 29 fe             	sub    %rdi,%rsi
     992:	48 89 e5             	mov    %rsp,%rbp
     995:	48 c1 fe 03          	sar    $0x3,%rsi
     999:	48 89 f0             	mov    %rsi,%rax
     99c:	48 c1 e8 3f          	shr    $0x3f,%rax
     9a0:	48 01 c6             	add    %rax,%rsi
     9a3:	48 d1 fe             	sar    %rsi
     9a6:	74 18                	je     9c0 <register_tm_clones+0x40>
     9a8:	48 8b 05 41 16 20 00 	mov    0x201641(%rip),%rax        # 201ff0 <_ITM_registerTMCloneTable>
     9af:	48 85 c0             	test   %rax,%rax
     9b2:	74 0c                	je     9c0 <register_tm_clones+0x40>
     9b4:	5d                   	pop    %rbp
     9b5:	ff e0                	jmpq   *%rax
     9b7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
     9be:	00 00 
     9c0:	5d                   	pop    %rbp
     9c1:	c3                   	retq   
     9c2:	0f 1f 40 00          	nopl   0x0(%rax)
     9c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
     9cd:	00 00 00 

00000000000009d0 <__do_global_dtors_aux>:
     9d0:	80 3d 39 16 20 00 00 	cmpb   $0x0,0x201639(%rip)        # 202010 <__TMC_END__>
     9d7:	75 2f                	jne    a08 <__do_global_dtors_aux+0x38>
     9d9:	48 83 3d 17 16 20 00 	cmpq   $0x0,0x201617(%rip)        # 201ff8 <__cxa_finalize@GLIBC_2.2.5>
     9e0:	00 
     9e1:	55                   	push   %rbp
     9e2:	48 89 e5             	mov    %rsp,%rbp
     9e5:	74 0c                	je     9f3 <__do_global_dtors_aux+0x23>
     9e7:	48 8b 3d 1a 16 20 00 	mov    0x20161a(%rip),%rdi        # 202008 <__dso_handle>
     9ee:	e8 0d ff ff ff       	callq  900 <__cxa_finalize@plt>
     9f3:	e8 48 ff ff ff       	callq  940 <deregister_tm_clones>
     9f8:	c6 05 11 16 20 00 01 	movb   $0x1,0x201611(%rip)        # 202010 <__TMC_END__>
     9ff:	5d                   	pop    %rbp
     a00:	c3                   	retq   
     a01:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
     a08:	f3 c3                	repz retq 
     a0a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000000a10 <frame_dummy>:
     a10:	55                   	push   %rbp
     a11:	48 89 e5             	mov    %rsp,%rbp
     a14:	5d                   	pop    %rbp
     a15:	e9 66 ff ff ff       	jmpq   980 <register_tm_clones>

0000000000000a1a <htInit>:
#include "hash.h"

/*初始化HashTable*/
void htInit(htItem **ht, uint length){
     a1a:	55                   	push   %rbp
     a1b:	48 89 e5             	mov    %rsp,%rbp
     a1e:	53                   	push   %rbx
     a1f:	48 83 ec 28          	sub    $0x28,%rsp
     a23:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
     a27:	89 75 d4             	mov    %esi,-0x2c(%rbp)
    int i;
    for (i = 0; i<length; i++){
     a2a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
     a31:	e9 a1 00 00 00       	jmpq   ad7 <htInit+0xbd>
        ht[i] = (htItem*)malloc(sizeof(htItem));
     a36:	8b 45 ec             	mov    -0x14(%rbp),%eax
     a39:	48 98                	cltq   
     a3b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
     a42:	00 
     a43:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
     a47:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
     a4b:	bf 20 00 00 00       	mov    $0x20,%edi
     a50:	e8 7b fe ff ff       	callq  8d0 <malloc@plt>
     a55:	48 89 03             	mov    %rax,(%rbx)
		ht[i]->md5 =(char *)malloc(MD5_LEN);
     a58:	8b 45 ec             	mov    -0x14(%rbp),%eax
     a5b:	48 98                	cltq   
     a5d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
     a64:	00 
     a65:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
     a69:	48 01 d0             	add    %rdx,%rax
     a6c:	48 8b 18             	mov    (%rax),%rbx
     a6f:	bf 21 00 00 00       	mov    $0x21,%edi
     a74:	e8 57 fe ff ff       	callq  8d0 <malloc@plt>
     a79:	48 89 43 10          	mov    %rax,0x10(%rbx)
        memset(ht[i]->md5, 0, MD5_LEN);
     a7d:	8b 45 ec             	mov    -0x14(%rbp),%eax
     a80:	48 98                	cltq   
     a82:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
     a89:	00 
     a8a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
     a8e:	48 01 d0             	add    %rdx,%rax
     a91:	48 8b 00             	mov    (%rax),%rax
     a94:	48 8b 40 10          	mov    0x10(%rax),%rax
     a98:	ba 21 00 00 00       	mov    $0x21,%edx
     a9d:	be 00 00 00 00       	mov    $0x0,%esi
     aa2:	48 89 c7             	mov    %rax,%rdi
     aa5:	e8 06 fe ff ff       	callq  8b0 <memset@plt>
        memset(ht[i], 0, sizeof(htItem));
     aaa:	8b 45 ec             	mov    -0x14(%rbp),%eax
     aad:	48 98                	cltq   
     aaf:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
     ab6:	00 
     ab7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
     abb:	48 01 d0             	add    %rdx,%rax
     abe:	48 8b 00             	mov    (%rax),%rax
     ac1:	ba 20 00 00 00       	mov    $0x20,%edx
     ac6:	be 00 00 00 00       	mov    $0x0,%esi
     acb:	48 89 c7             	mov    %rax,%rdi
     ace:	e8 dd fd ff ff       	callq  8b0 <memset@plt>
    for (i = 0; i<length; i++){
     ad3:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
     ad7:	8b 45 ec             	mov    -0x14(%rbp),%eax
     ada:	39 45 d4             	cmp    %eax,-0x2c(%rbp)
     add:	0f 87 53 ff ff ff    	ja     a36 <htInit+0x1c>
    }
	ht[0]->fid=length;
     ae3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
     ae7:	48 8b 00             	mov    (%rax),%rax
     aea:	8b 55 d4             	mov    -0x2c(%rbp),%edx
     aed:	89 50 18             	mov    %edx,0x18(%rax)
}
     af0:	90                   	nop
     af1:	48 83 c4 28          	add    $0x28,%rsp
     af5:	5b                   	pop    %rbx
     af6:	5d                   	pop    %rbp
     af7:	c3                   	retq   

0000000000000af8 <htGet>:

/** get hashTable elements 进行对应的hash值的搜索，如果找到则返回该节点*/
htItem* htGet(char *key ,htItem **ht){
     af8:	55                   	push   %rbp
     af9:	48 89 e5             	mov    %rsp,%rbp
     afc:	48 83 ec 30          	sub    $0x30,%rsp
     b00:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
     b04:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
   	 uint i = htIndex(key, ht);
     b08:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
     b0c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
     b10:	48 89 d6             	mov    %rdx,%rsi
     b13:	48 89 c7             	mov    %rax,%rdi
     b16:	e8 6f 03 00 00       	callq  e8a <htIndex>
     b1b:	89 45 ec             	mov    %eax,-0x14(%rbp)
    	htItem *item = ht[i]->next;
     b1e:	8b 45 ec             	mov    -0x14(%rbp),%eax
     b21:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
     b28:	00 
     b29:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
     b2d:	48 01 d0             	add    %rdx,%rax
     b30:	48 8b 00             	mov    (%rax),%rax
     b33:	48 8b 00             	mov    (%rax),%rax
     b36:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    	htItem *tmp = (htItem*)malloc(sizeof(htItem));
     b3a:	bf 20 00 00 00       	mov    $0x20,%edi
     b3f:	e8 8c fd ff ff       	callq  8d0 <malloc@plt>
     b44:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	tmp->md5=(string)malloc(MD5_LEN);
     b48:	bf 21 00 00 00       	mov    $0x21,%edi
     b4d:	e8 7e fd ff ff       	callq  8d0 <malloc@plt>
     b52:	48 89 c2             	mov    %rax,%rdx
     b55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     b59:	48 89 50 10          	mov    %rdx,0x10(%rax)
	tmp->key_string=(string)malloc(strlen(key));
     b5d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
     b61:	48 89 c7             	mov    %rax,%rdi
     b64:	e8 17 fd ff ff       	callq  880 <strlen@plt>
     b69:	48 89 c7             	mov    %rax,%rdi
     b6c:	e8 5f fd ff ff       	callq  8d0 <malloc@plt>
     b71:	48 89 c2             	mov    %rax,%rdx
     b74:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     b78:	48 89 50 08          	mov    %rdx,0x8(%rax)
	
	memset(tmp->md5,0,MD5_LEN);
     b7c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     b80:	48 8b 40 10          	mov    0x10(%rax),%rax
     b84:	ba 21 00 00 00       	mov    $0x21,%edx
     b89:	be 00 00 00 00       	mov    $0x0,%esi
     b8e:	48 89 c7             	mov    %rax,%rdi
     b91:	e8 1a fd ff ff       	callq  8b0 <memset@plt>
	memset(tmp->key_string,0,strlen(key));
     b96:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
     b9a:	48 89 c7             	mov    %rax,%rdi
     b9d:	e8 de fc ff ff       	callq  880 <strlen@plt>
     ba2:	48 89 c2             	mov    %rax,%rdx
     ba5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     ba9:	48 8b 40 08          	mov    0x8(%rax),%rax
     bad:	be 00 00 00 00       	mov    $0x0,%esi
     bb2:	48 89 c7             	mov    %rax,%rdi
     bb5:	e8 f6 fc ff ff       	callq  8b0 <memset@plt>
	memset(tmp, 0, sizeof(htItem));
     bba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     bbe:	ba 20 00 00 00       	mov    $0x20,%edx
     bc3:	be 00 00 00 00       	mov    $0x0,%esi
     bc8:	48 89 c7             	mov    %rax,%rdi
     bcb:	e8 e0 fc ff ff       	callq  8b0 <memset@plt>
    
	while (item)
     bd0:	eb 2c                	jmp    bfe <htGet+0x106>
    	{
        if (strcmp(key,item->key_string) == 0){
     bd2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
     bd6:	48 8b 50 08          	mov    0x8(%rax),%rdx
     bda:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
     bde:	48 89 d6             	mov    %rdx,%rsi
     be1:	48 89 c7             	mov    %rax,%rdi
     be4:	e8 d7 fc ff ff       	callq  8c0 <strcmp@plt>
     be9:	85 c0                	test   %eax,%eax
     beb:	75 06                	jne    bf3 <htGet+0xfb>
		//printf("old done %s %s\n",item->key_string,item->md5);
            return item;
     bed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
     bf1:	eb 43                	jmp    c36 <htGet+0x13e>
        }
	
        item = item->next;
     bf3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
     bf7:	48 8b 00             	mov    (%rax),%rax
     bfa:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	while (item)
     bfe:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
     c03:	75 cd                	jne    bd2 <htGet+0xda>

    }
	free(tmp);
     c05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     c09:	48 89 c7             	mov    %rax,%rdi
     c0c:	e8 0f fc ff ff       	callq  820 <free@plt>
	free(tmp->md5);
     c11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     c15:	48 8b 40 10          	mov    0x10(%rax),%rax
     c19:	48 89 c7             	mov    %rax,%rdi
     c1c:	e8 ff fb ff ff       	callq  820 <free@plt>
	free(tmp->key_string);
     c21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     c25:	48 8b 40 08          	mov    0x8(%rax),%rax
     c29:	48 89 c7             	mov    %rax,%rdi
     c2c:	e8 ef fb ff ff       	callq  820 <free@plt>
    return NULL;
     c31:	b8 00 00 00 00       	mov    $0x0,%eax
}
     c36:	c9                   	leaveq 
     c37:	c3                   	retq   

0000000000000c38 <htSet>:

/** set hashTable element 插入新的hash值*/
uint htSet(char *key, string md5, htItem **ht){
     c38:	55                   	push   %rbp
     c39:	48 89 e5             	mov    %rsp,%rbp
     c3c:	53                   	push   %rbx
     c3d:	48 83 ec 38          	sub    $0x38,%rsp
     c41:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
     c45:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
     c49:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    unsigned int i = htIndex(key, ht);
     c4d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
     c51:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
     c55:	48 89 d6             	mov    %rdx,%rsi
     c58:	48 89 c7             	mov    %rax,%rdi
     c5b:	e8 2a 02 00 00       	callq  e8a <htIndex>
     c60:	89 45 e4             	mov    %eax,-0x1c(%rbp)
    htItem *item = ht[i];
     c63:	8b 45 e4             	mov    -0x1c(%rbp),%eax
     c66:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
     c6d:	00 
     c6e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     c72:	48 01 d0             	add    %rdx,%rax
     c75:	48 8b 00             	mov    (%rax),%rax
     c78:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    while (item->next)
     c7c:	eb 42                	jmp    cc0 <htSet+0x88>
    {
    //已经存在的话则直接更新值
        if (strcmp(key, item->next->key_string) == 0){
     c7e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     c82:	48 8b 00             	mov    (%rax),%rax
     c85:	48 8b 50 08          	mov    0x8(%rax),%rdx
     c89:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
     c8d:	48 89 d6             	mov    %rdx,%rsi
     c90:	48 89 c7             	mov    %rax,%rdi
     c93:	e8 28 fc ff ff       	callq  8c0 <strcmp@plt>
     c98:	85 c0                	test   %eax,%eax
     c9a:	75 19                	jne    cb5 <htSet+0x7d>
            item->next->md5 = md5;
     c9c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     ca0:	48 8b 00             	mov    (%rax),%rax
     ca3:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
     ca7:	48 89 50 10          	mov    %rdx,0x10(%rax)
            return 0;
     cab:	b8 00 00 00 00       	mov    $0x0,%eax
     cb0:	e9 bd 00 00 00       	jmpq   d72 <htSet+0x13a>
        }
        else{
            item = item->next;
     cb5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     cb9:	48 8b 00             	mov    (%rax),%rax
     cbc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    while (item->next)
     cc0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     cc4:	48 8b 00             	mov    (%rax),%rax
     cc7:	48 85 c0             	test   %rax,%rax
     cca:	75 b2                	jne    c7e <htSet+0x46>
        }
    }
    item->next = (htItem*)malloc(sizeof(htItem));
     ccc:	bf 20 00 00 00       	mov    $0x20,%edi
     cd1:	e8 fa fb ff ff       	callq  8d0 <malloc@plt>
     cd6:	48 89 c2             	mov    %rax,%rdx
     cd9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     cdd:	48 89 10             	mov    %rdx,(%rax)
	item->next->md5=(string)malloc(MD5_LEN);
     ce0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     ce4:	48 8b 18             	mov    (%rax),%rbx
     ce7:	bf 21 00 00 00       	mov    $0x21,%edi
     cec:	e8 df fb ff ff       	callq  8d0 <malloc@plt>
     cf1:	48 89 43 10          	mov    %rax,0x10(%rbx)
	item->next->key_string=(string)malloc(strlen(key));
     cf5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
     cf9:	48 89 c7             	mov    %rax,%rdi
     cfc:	e8 7f fb ff ff       	callq  880 <strlen@plt>
     d01:	48 89 c2             	mov    %rax,%rdx
     d04:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     d08:	48 8b 18             	mov    (%rax),%rbx
     d0b:	48 89 d7             	mov    %rdx,%rdi
     d0e:	e8 bd fb ff ff       	callq  8d0 <malloc@plt>
     d13:	48 89 43 08          	mov    %rax,0x8(%rbx)

    strncpy(item->next->md5,md5,32);
     d17:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     d1b:	48 8b 00             	mov    (%rax),%rax
     d1e:	48 8b 40 10          	mov    0x10(%rax),%rax
     d22:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
     d26:	ba 20 00 00 00       	mov    $0x20,%edx
     d2b:	48 89 ce             	mov    %rcx,%rsi
     d2e:	48 89 c7             	mov    %rax,%rdi
     d31:	e8 fa fa ff ff       	callq  830 <strncpy@plt>
    strncpy(item->next->key_string,key,strlen(key));
     d36:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
     d3a:	48 89 c7             	mov    %rax,%rdi
     d3d:	e8 3e fb ff ff       	callq  880 <strlen@plt>
     d42:	48 89 c2             	mov    %rax,%rdx
     d45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     d49:	48 8b 00             	mov    (%rax),%rax
     d4c:	48 8b 40 08          	mov    0x8(%rax),%rax
     d50:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
     d54:	48 89 ce             	mov    %rcx,%rsi
     d57:	48 89 c7             	mov    %rax,%rdi
     d5a:	e8 d1 fa ff ff       	callq  830 <strncpy@plt>
    item->next->next = NULL;
     d5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     d63:	48 8b 00             	mov    (%rax),%rax
     d66:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    return 0;
     d6d:	b8 00 00 00 00       	mov    $0x0,%eax
}
     d72:	48 83 c4 38          	add    $0x38,%rsp
     d76:	5b                   	pop    %rbx
     d77:	5d                   	pop    %rbp
     d78:	c3                   	retq   

0000000000000d79 <htDel>:

/** delete one element of hashtable  删除hash值*/
int htDel(char *key, htItem **ht){
     d79:	55                   	push   %rbp
     d7a:	48 89 e5             	mov    %rsp,%rbp
     d7d:	48 83 ec 30          	sub    $0x30,%rsp
     d81:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
     d85:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    uint i = htIndex(key, ht);
     d89:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
     d8d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
     d91:	48 89 d6             	mov    %rdx,%rsi
     d94:	48 89 c7             	mov    %rax,%rdi
     d97:	e8 ee 00 00 00       	callq  e8a <htIndex>
     d9c:	89 45 ec             	mov    %eax,-0x14(%rbp)
    htItem *item = ht[i];
     d9f:	8b 45 ec             	mov    -0x14(%rbp),%eax
     da2:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
     da9:	00 
     daa:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
     dae:	48 01 d0             	add    %rdx,%rax
     db1:	48 8b 00             	mov    (%rax),%rax
     db4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    while (item->next){
     db8:	eb 65                	jmp    e1f <htDel+0xa6>
        if (strcmp(key, item->next->key_string) == 0){
     dba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
     dbe:	48 8b 00             	mov    (%rax),%rax
     dc1:	48 8b 50 08          	mov    0x8(%rax),%rdx
     dc5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
     dc9:	48 89 d6             	mov    %rdx,%rsi
     dcc:	48 89 c7             	mov    %rax,%rdi
     dcf:	e8 ec fa ff ff       	callq  8c0 <strcmp@plt>
     dd4:	85 c0                	test   %eax,%eax
     dd6:	75 3c                	jne    e14 <htDel+0x9b>
            htItem *tmp = item->next;
     dd8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
     ddc:	48 8b 00             	mov    (%rax),%rax
     ddf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            item->next = tmp->next;
     de3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     de7:	48 8b 10             	mov    (%rax),%rdx
     dea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
     dee:	48 89 10             	mov    %rdx,(%rax)
			free(tmp->md5);
     df1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     df5:	48 8b 40 10          	mov    0x10(%rax),%rax
     df9:	48 89 c7             	mov    %rax,%rdi
     dfc:	e8 1f fa ff ff       	callq  820 <free@plt>
            free(tmp);
     e01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     e05:	48 89 c7             	mov    %rax,%rdi
     e08:	e8 13 fa ff ff       	callq  820 <free@plt>
            return 0;
     e0d:	b8 00 00 00 00       	mov    $0x0,%eax
     e12:	eb 1c                	jmp    e30 <htDel+0xb7>
        }
        item = item->next;
     e14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
     e18:	48 8b 00             	mov    (%rax),%rax
     e1b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    while (item->next){
     e1f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
     e23:	48 8b 00             	mov    (%rax),%rax
     e26:	48 85 c0             	test   %rax,%rax
     e29:	75 8f                	jne    dba <htDel+0x41>
    }
    return -1;
     e2b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
     e30:	c9                   	leaveq 
     e31:	c3                   	retq   

0000000000000e32 <bkdrHash>:

/** BKDR hash function  对字符串进行散列，得到一个整数的hash值*/
uint bkdrHash(char *key)
{
     e32:	55                   	push   %rbp
     e33:	48 89 e5             	mov    %rsp,%rbp
     e36:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    uint seed = 131;
     e3a:	c7 45 fc 83 00 00 00 	movl   $0x83,-0x4(%rbp)
    uint hash = 0;
     e41:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
    while (*key != '\n' && *key != 0)
     e48:	eb 20                	jmp    e6a <bkdrHash+0x38>
    {
        hash = hash * seed + (*key++);
     e4a:	8b 45 f8             	mov    -0x8(%rbp),%eax
     e4d:	0f af 45 fc          	imul   -0x4(%rbp),%eax
     e51:	89 c1                	mov    %eax,%ecx
     e53:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     e57:	48 8d 50 01          	lea    0x1(%rax),%rdx
     e5b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
     e5f:	0f b6 00             	movzbl (%rax),%eax
     e62:	0f be c0             	movsbl %al,%eax
     e65:	01 c8                	add    %ecx,%eax
     e67:	89 45 f8             	mov    %eax,-0x8(%rbp)
    while (*key != '\n' && *key != 0)
     e6a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     e6e:	0f b6 00             	movzbl (%rax),%eax
     e71:	3c 0a                	cmp    $0xa,%al
     e73:	74 0b                	je     e80 <bkdrHash+0x4e>
     e75:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     e79:	0f b6 00             	movzbl (%rax),%eax
     e7c:	84 c0                	test   %al,%al
     e7e:	75 ca                	jne    e4a <bkdrHash+0x18>
    }
    return (hash & 0x7FFFFFFF);
     e80:	8b 45 f8             	mov    -0x8(%rbp),%eax
     e83:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
}
     e88:	5d                   	pop    %rbp
     e89:	c3                   	retq   

0000000000000e8a <htIndex>:

/** get the index of hash table  根据得到的hash值选择一个槽位置*/
uint htIndex(char *key, htItem **ht){
     e8a:	55                   	push   %rbp
     e8b:	48 89 e5             	mov    %rsp,%rbp
     e8e:	48 83 ec 20          	sub    $0x20,%rsp
     e92:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
     e96:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    uint hashedKey = bkdrHash(key);
     e9a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     e9e:	48 89 c7             	mov    %rax,%rdi
     ea1:	e8 8c ff ff ff       	callq  e32 <bkdrHash>
     ea6:	89 45 f8             	mov    %eax,-0x8(%rbp)
    uint length = (ht[0]->fid - 1);
     ea9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
     ead:	48 8b 00             	mov    (%rax),%rax
     eb0:	8b 40 18             	mov    0x18(%rax),%eax
     eb3:	83 e8 01             	sub    $0x1,%eax
     eb6:	89 45 fc             	mov    %eax,-0x4(%rbp)
    return (uint)hashedKey % length + 1;
     eb9:	8b 45 f8             	mov    -0x8(%rbp),%eax
     ebc:	ba 00 00 00 00       	mov    $0x0,%edx
     ec1:	f7 75 fc             	divl   -0x4(%rbp)
     ec4:	89 d0                	mov    %edx,%eax
     ec6:	83 c0 01             	add    $0x1,%eax
}
     ec9:	c9                   	leaveq 
     eca:	c3                   	retq   

0000000000000ecb <htLen>:

/** get element number in the hashtable */
uint htLen(htItem **ht){
     ecb:	55                   	push   %rbp
     ecc:	48 89 e5             	mov    %rsp,%rbp
     ecf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    uint alength = ht[0]->fid;
     ed3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     ed7:	48 8b 00             	mov    (%rax),%rax
     eda:	8b 40 18             	mov    0x18(%rax),%eax
     edd:	89 45 fc             	mov    %eax,-0x4(%rbp)
    uint i, length = 0;
     ee0:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
    for (i = 1; i < alength; i++){
     ee7:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
     eee:	eb 25                	jmp    f15 <htLen+0x4a>
        if (ht[i]->next) {
     ef0:	8b 45 f4             	mov    -0xc(%rbp),%eax
     ef3:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
     efa:	00 
     efb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     eff:	48 01 d0             	add    %rdx,%rax
     f02:	48 8b 00             	mov    (%rax),%rax
     f05:	48 8b 00             	mov    (%rax),%rax
     f08:	48 85 c0             	test   %rax,%rax
     f0b:	74 04                	je     f11 <htLen+0x46>
            length++;
     f0d:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
    for (i = 1; i < alength; i++){
     f11:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
     f15:	8b 45 f4             	mov    -0xc(%rbp),%eax
     f18:	3b 45 fc             	cmp    -0x4(%rbp),%eax
     f1b:	72 d3                	jb     ef0 <htLen+0x25>
        }
    }
    return length;
     f1d:	8b 45 f8             	mov    -0x8(%rbp),%eax
}
     f20:	5d                   	pop    %rbp
     f21:	c3                   	retq   

0000000000000f22 <htCapacity>:

/** get capacity of hashtable */
uint htCapacity(htItem **ht)
{
     f22:	55                   	push   %rbp
     f23:	48 89 e5             	mov    %rsp,%rbp
     f26:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    return ht[0]->fid;
     f2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     f2e:	48 8b 00             	mov    (%rax),%rax
     f31:	8b 40 18             	mov    0x18(%rax),%eax
}
     f34:	5d                   	pop    %rbp
     f35:	c3                   	retq   

0000000000000f36 <print_hashTable>:

void print_hashTable(htItem **ht)
{
     f36:	55                   	push   %rbp
     f37:	48 89 e5             	mov    %rsp,%rbp
     f3a:	48 83 ec 20          	sub    $0x20,%rsp
     f3e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    uint length = ht[0]->fid;
     f42:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     f46:	48 8b 00             	mov    (%rax),%rax
     f49:	8b 40 18             	mov    0x18(%rax),%eax
     f4c:	89 45 f4             	mov    %eax,-0xc(%rbp)
    uint i;
    htItem *item;
    for (i = 1; i < length; i++)
     f4f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%rbp)
     f56:	eb 5a                	jmp    fb2 <print_hashTable+0x7c>
    {
        item = ht[i]->next;
     f58:	8b 45 f0             	mov    -0x10(%rbp),%eax
     f5b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
     f62:	00 
     f63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     f67:	48 01 d0             	add    %rdx,%rax
     f6a:	48 8b 00             	mov    (%rax),%rax
     f6d:	48 8b 00             	mov    (%rax),%rax
     f70:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        while (item)
     f74:	eb 31                	jmp    fa7 <print_hashTable+0x71>
        {
            printf("%d:%s => %s\n", i,item->key_string, item->md5);
     f76:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     f7a:	48 8b 48 10          	mov    0x10(%rax),%rcx
     f7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     f82:	48 8b 50 08          	mov    0x8(%rax),%rdx
     f86:	8b 45 f0             	mov    -0x10(%rbp),%eax
     f89:	89 c6                	mov    %eax,%esi
     f8b:	48 8d 3d 02 06 00 00 	lea    0x602(%rip),%rdi        # 1594 <_IO_stdin_used+0x4>
     f92:	b8 00 00 00 00       	mov    $0x0,%eax
     f97:	e8 04 f9 ff ff       	callq  8a0 <printf@plt>
            item = item->next;
     f9c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     fa0:	48 8b 00             	mov    (%rax),%rax
     fa3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        while (item)
     fa7:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
     fac:	75 c8                	jne    f76 <print_hashTable+0x40>
    for (i = 1; i < length; i++)
     fae:	83 45 f0 01          	addl   $0x1,-0x10(%rbp)
     fb2:	8b 45 f0             	mov    -0x10(%rbp),%eax
     fb5:	3b 45 f4             	cmp    -0xc(%rbp),%eax
     fb8:	72 9e                	jb     f58 <print_hashTable+0x22>
        }
    }
}
     fba:	90                   	nop
     fbb:	c9                   	leaveq 
     fbc:	c3                   	retq   

0000000000000fbd <main>:
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>

int main()
{
     fbd:	55                   	push   %rbp
     fbe:	48 89 e5             	mov    %rsp,%rbp
     fc1:	48 81 ec a0 06 00 00 	sub    $0x6a0,%rsp
     fc8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
     fcf:	00 00 
     fd1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
     fd5:	31 c0                	xor    %eax,%eax

   	htItem *item[200];
	htInit(item, 200);
     fd7:	48 8d 85 b0 f9 ff ff 	lea    -0x650(%rbp),%rax
     fde:	be c8 00 00 00       	mov    $0xc8,%esi
     fe3:	48 89 c7             	mov    %rax,%rdi
     fe6:	e8 2f fa ff ff       	callq  a1a <htInit>
	char *buf=(char*)malloc(sizeof(char)*1024);
     feb:	bf 00 04 00 00       	mov    $0x400,%edi
     ff0:	e8 db f8 ff ff       	callq  8d0 <malloc@plt>
     ff5:	48 89 85 68 f9 ff ff 	mov    %rax,-0x698(%rbp)
	char *key_string=(char*)malloc(sizeof(char)*512);
     ffc:	bf 00 02 00 00       	mov    $0x200,%edi
    1001:	e8 ca f8 ff ff       	callq  8d0 <malloc@plt>
    1006:	48 89 85 80 f9 ff ff 	mov    %rax,-0x680(%rbp)
	char *md5_string=(char*)malloc(sizeof(char)*33);
    100d:	bf 21 00 00 00       	mov    $0x21,%edi
    1012:	e8 b9 f8 ff ff       	callq  8d0 <malloc@plt>
    1017:	48 89 85 88 f9 ff ff 	mov    %rax,-0x678(%rbp)
	size_t len=1024;
    101e:	48 c7 85 70 f9 ff ff 	movq   $0x400,-0x690(%rbp)
    1025:	00 04 00 00 
	if(buf==NULL)
    1029:	48 8b 85 68 f9 ff ff 	mov    -0x698(%rbp),%rax
    1030:	48 85 c0             	test   %rax,%rax
    1033:	75 0a                	jne    103f <main+0x82>
		return -1;
    1035:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    103a:	e9 ac 04 00 00       	jmpq   14eb <main+0x52e>

	FILE* stream=fopen("bootmd5.txt","r+");
    103f:	48 8d 35 5b 05 00 00 	lea    0x55b(%rip),%rsi        # 15a1 <_IO_stdin_used+0x11>
    1046:	48 8d 3d 57 05 00 00 	lea    0x557(%rip),%rdi        # 15a4 <_IO_stdin_used+0x14>
    104d:	e8 8e f8 ff ff       	callq  8e0 <fopen@plt>
    1052:	48 89 85 90 f9 ff ff 	mov    %rax,-0x670(%rbp)
	if(stream==NULL)
    1059:	48 83 bd 90 f9 ff ff 	cmpq   $0x0,-0x670(%rbp)
    1060:	00 
    1061:	75 0a                	jne    106d <main+0xb0>
		return -1;
    1063:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    1068:	e9 7e 04 00 00       	jmpq   14eb <main+0x52e>
	size_t read;

	memset(buf,0,len);
    106d:	48 8b 95 70 f9 ff ff 	mov    -0x690(%rbp),%rdx
    1074:	48 8b 85 68 f9 ff ff 	mov    -0x698(%rbp),%rax
    107b:	be 00 00 00 00       	mov    $0x0,%esi
    1080:	48 89 c7             	mov    %rax,%rdi
    1083:	e8 28 f8 ff ff       	callq  8b0 <memset@plt>

	memset(key_string,0,512);
    1088:	48 8b 85 80 f9 ff ff 	mov    -0x680(%rbp),%rax
    108f:	ba 00 02 00 00       	mov    $0x200,%edx
    1094:	be 00 00 00 00       	mov    $0x0,%esi
    1099:	48 89 c7             	mov    %rax,%rdi
    109c:	e8 0f f8 ff ff       	callq  8b0 <memset@plt>
	memset(md5_string,0,33);
    10a1:	48 8b 85 88 f9 ff ff 	mov    -0x678(%rbp),%rax
    10a8:	ba 21 00 00 00       	mov    $0x21,%edx
    10ad:	be 00 00 00 00       	mov    $0x0,%esi
    10b2:	48 89 c7             	mov    %rax,%rdi
    10b5:	e8 f6 f7 ff ff       	callq  8b0 <memset@plt>
	int count=0;
    10ba:	c7 85 60 f9 ff ff 00 	movl   $0x0,-0x6a0(%rbp)
    10c1:	00 00 00 
	unsigned int num=0;
    10c4:	c7 85 64 f9 ff ff 00 	movl   $0x0,-0x69c(%rbp)
    10cb:	00 00 00 
	char *str=NULL;
    10ce:	48 c7 85 78 f9 ff ff 	movq   $0x0,-0x688(%rbp)
    10d5:	00 00 00 00 
	while((read=getline(&buf,&len,stream))!=-1){
    10d9:	e9 11 01 00 00       	jmpq   11ef <main+0x232>
		count++;
    10de:	83 85 60 f9 ff ff 01 	addl   $0x1,-0x6a0(%rbp)
		
		str=buf;
    10e5:	48 8b 85 68 f9 ff ff 	mov    -0x698(%rbp),%rax
    10ec:	48 89 85 78 f9 ff ff 	mov    %rax,-0x688(%rbp)
		while((*buf)!=' ')
    10f3:	eb 19                	jmp    110e <main+0x151>
		{
			num++;
    10f5:	83 85 64 f9 ff ff 01 	addl   $0x1,-0x69c(%rbp)
			buf++;
    10fc:	48 8b 85 68 f9 ff ff 	mov    -0x698(%rbp),%rax
    1103:	48 83 c0 01          	add    $0x1,%rax
    1107:	48 89 85 68 f9 ff ff 	mov    %rax,-0x698(%rbp)
		while((*buf)!=' ')
    110e:	48 8b 85 68 f9 ff ff 	mov    -0x698(%rbp),%rax
    1115:	0f b6 00             	movzbl (%rax),%eax
    1118:	3c 20                	cmp    $0x20,%al
    111a:	75 d9                	jne    10f5 <main+0x138>
		}
		buf=str;
    111c:	48 8b 85 78 f9 ff ff 	mov    -0x688(%rbp),%rax
    1123:	48 89 85 68 f9 ff ff 	mov    %rax,-0x698(%rbp)
		str=NULL;
    112a:	48 c7 85 78 f9 ff ff 	movq   $0x0,-0x688(%rbp)
    1131:	00 00 00 00 
		strncpy(key_string,buf,num);
    1135:	8b 95 64 f9 ff ff    	mov    -0x69c(%rbp),%edx
    113b:	48 8b 8d 68 f9 ff ff 	mov    -0x698(%rbp),%rcx
    1142:	48 8b 85 80 f9 ff ff 	mov    -0x680(%rbp),%rax
    1149:	48 89 ce             	mov    %rcx,%rsi
    114c:	48 89 c7             	mov    %rax,%rdi
    114f:	e8 dc f6 ff ff       	callq  830 <strncpy@plt>
		strcpy(md5_string,buf+4+num);
    1154:	48 8b 85 68 f9 ff ff 	mov    -0x698(%rbp),%rax
    115b:	8b 95 64 f9 ff ff    	mov    -0x69c(%rbp),%edx
    1161:	48 83 c2 04          	add    $0x4,%rdx
    1165:	48 01 c2             	add    %rax,%rdx
    1168:	48 8b 85 88 f9 ff ff 	mov    -0x678(%rbp),%rax
    116f:	48 89 d6             	mov    %rdx,%rsi
    1172:	48 89 c7             	mov    %rax,%rdi
    1175:	e8 d6 f6 ff ff       	callq  850 <strcpy@plt>
		
		htSet(key_string,md5_string,item);
    117a:	48 8d 95 b0 f9 ff ff 	lea    -0x650(%rbp),%rdx
    1181:	48 8b 8d 88 f9 ff ff 	mov    -0x678(%rbp),%rcx
    1188:	48 8b 85 80 f9 ff ff 	mov    -0x680(%rbp),%rax
    118f:	48 89 ce             	mov    %rcx,%rsi
    1192:	48 89 c7             	mov    %rax,%rdi
    1195:	e8 9e fa ff ff       	callq  c38 <htSet>
		num=0;
    119a:	c7 85 64 f9 ff ff 00 	movl   $0x0,-0x69c(%rbp)
    11a1:	00 00 00 
		memset(buf,0,1024);
    11a4:	48 8b 85 68 f9 ff ff 	mov    -0x698(%rbp),%rax
    11ab:	ba 00 04 00 00       	mov    $0x400,%edx
    11b0:	be 00 00 00 00       	mov    $0x0,%esi
    11b5:	48 89 c7             	mov    %rax,%rdi
    11b8:	e8 f3 f6 ff ff       	callq  8b0 <memset@plt>
		memset(key_string,0,512);
    11bd:	48 8b 85 80 f9 ff ff 	mov    -0x680(%rbp),%rax
    11c4:	ba 00 02 00 00       	mov    $0x200,%edx
    11c9:	be 00 00 00 00       	mov    $0x0,%esi
    11ce:	48 89 c7             	mov    %rax,%rdi
    11d1:	e8 da f6 ff ff       	callq  8b0 <memset@plt>
		memset(md5_string,0,33);
    11d6:	48 8b 85 88 f9 ff ff 	mov    -0x678(%rbp),%rax
    11dd:	ba 21 00 00 00       	mov    $0x21,%edx
    11e2:	be 00 00 00 00       	mov    $0x0,%esi
    11e7:	48 89 c7             	mov    %rax,%rdi
    11ea:	e8 c1 f6 ff ff       	callq  8b0 <memset@plt>
	while((read=getline(&buf,&len,stream))!=-1){
    11ef:	48 8b 95 90 f9 ff ff 	mov    -0x670(%rbp),%rdx
    11f6:	48 8d 8d 70 f9 ff ff 	lea    -0x690(%rbp),%rcx
    11fd:	48 8d 85 68 f9 ff ff 	lea    -0x698(%rbp),%rax
    1204:	48 89 ce             	mov    %rcx,%rsi
    1207:	48 89 c7             	mov    %rax,%rdi
    120a:	e8 e1 f6 ff ff       	callq  8f0 <getline@plt>
    120f:	48 89 85 98 f9 ff ff 	mov    %rax,-0x668(%rbp)
    1216:	48 83 bd 98 f9 ff ff 	cmpq   $0xffffffffffffffff,-0x668(%rbp)
    121d:	ff 
    121e:	0f 85 ba fe ff ff    	jne    10de <main+0x121>
	}	
	fclose(stream);
    1224:	48 8b 85 90 f9 ff ff 	mov    -0x670(%rbp),%rax
    122b:	48 89 c7             	mov    %rax,%rdi
    122e:	e8 3d f6 ff ff       	callq  870 <fclose@plt>

	print_hashTable(item);
    1233:	48 8d 85 b0 f9 ff ff 	lea    -0x650(%rbp),%rax
    123a:	48 89 c7             	mov    %rax,%rdi
    123d:	e8 f4 fc ff ff       	callq  f36 <print_hashTable>

	printf("Geting ....\n");
    1242:	48 8d 3d 67 03 00 00 	lea    0x367(%rip),%rdi        # 15b0 <_IO_stdin_used+0x20>
    1249:	e8 12 f6 ff ff       	callq  860 <puts@plt>

	count=0;
    124e:	c7 85 60 f9 ff ff 00 	movl   $0x0,-0x6a0(%rbp)
    1255:	00 00 00 
	FILE* check_stream=fopen("boot.txt","r+");
    1258:	48 8d 35 42 03 00 00 	lea    0x342(%rip),%rsi        # 15a1 <_IO_stdin_used+0x11>
    125f:	48 8d 3d 56 03 00 00 	lea    0x356(%rip),%rdi        # 15bc <_IO_stdin_used+0x2c>
    1266:	e8 75 f6 ff ff       	callq  8e0 <fopen@plt>
    126b:	48 89 85 a0 f9 ff ff 	mov    %rax,-0x660(%rbp)
	while((read=getline(&buf,&len,check_stream))!=-1){
    1272:	e9 fe 01 00 00       	jmpq   1475 <main+0x4b8>
		count++;
    1277:	83 85 60 f9 ff ff 01 	addl   $0x1,-0x6a0(%rbp)
		
		str=buf;
    127e:	48 8b 85 68 f9 ff ff 	mov    -0x698(%rbp),%rax
    1285:	48 89 85 78 f9 ff ff 	mov    %rax,-0x688(%rbp)
		while((*buf)!=' ')
    128c:	eb 19                	jmp    12a7 <main+0x2ea>
		{
			num++;
    128e:	83 85 64 f9 ff ff 01 	addl   $0x1,-0x69c(%rbp)
			buf++;
    1295:	48 8b 85 68 f9 ff ff 	mov    -0x698(%rbp),%rax
    129c:	48 83 c0 01          	add    $0x1,%rax
    12a0:	48 89 85 68 f9 ff ff 	mov    %rax,-0x698(%rbp)
		while((*buf)!=' ')
    12a7:	48 8b 85 68 f9 ff ff 	mov    -0x698(%rbp),%rax
    12ae:	0f b6 00             	movzbl (%rax),%eax
    12b1:	3c 20                	cmp    $0x20,%al
    12b3:	75 d9                	jne    128e <main+0x2d1>
		}
		buf=str;
    12b5:	48 8b 85 78 f9 ff ff 	mov    -0x688(%rbp),%rax
    12bc:	48 89 85 68 f9 ff ff 	mov    %rax,-0x698(%rbp)
		str=NULL;
    12c3:	48 c7 85 78 f9 ff ff 	movq   $0x0,-0x688(%rbp)
    12ca:	00 00 00 00 
		strncpy(key_string,buf,num);
    12ce:	8b 95 64 f9 ff ff    	mov    -0x69c(%rbp),%edx
    12d4:	48 8b 8d 68 f9 ff ff 	mov    -0x698(%rbp),%rcx
    12db:	48 8b 85 80 f9 ff ff 	mov    -0x680(%rbp),%rax
    12e2:	48 89 ce             	mov    %rcx,%rsi
    12e5:	48 89 c7             	mov    %rax,%rdi
    12e8:	e8 43 f5 ff ff       	callq  830 <strncpy@plt>
		strcpy(md5_string,buf+4+num);
    12ed:	48 8b 85 68 f9 ff ff 	mov    -0x698(%rbp),%rax
    12f4:	8b 95 64 f9 ff ff    	mov    -0x69c(%rbp),%edx
    12fa:	48 83 c2 04          	add    $0x4,%rdx
    12fe:	48 01 c2             	add    %rax,%rdx
    1301:	48 8b 85 88 f9 ff ff 	mov    -0x678(%rbp),%rax
    1308:	48 89 d6             	mov    %rdx,%rsi
    130b:	48 89 c7             	mov    %rax,%rdi
    130e:	e8 3d f5 ff ff       	callq  850 <strcpy@plt>
		
		htItem *tmp=htGet(key_string,item);
    1313:	48 8d 95 b0 f9 ff ff 	lea    -0x650(%rbp),%rdx
    131a:	48 8b 85 80 f9 ff ff 	mov    -0x680(%rbp),%rax
    1321:	48 89 d6             	mov    %rdx,%rsi
    1324:	48 89 c7             	mov    %rax,%rdi
    1327:	e8 cc f7 ff ff       	callq  af8 <htGet>
    132c:	48 89 85 a8 f9 ff ff 	mov    %rax,-0x658(%rbp)
		if(count==41)
    1333:	83 bd 60 f9 ff ff 29 	cmpl   $0x29,-0x6a0(%rbp)
    133a:	75 22                	jne    135e <main+0x3a1>
			printf("now done %s %s",key_string,md5_string);
    133c:	48 8b 95 88 f9 ff ff 	mov    -0x678(%rbp),%rdx
    1343:	48 8b 85 80 f9 ff ff 	mov    -0x680(%rbp),%rax
    134a:	48 89 c6             	mov    %rax,%rsi
    134d:	48 8d 3d 71 02 00 00 	lea    0x271(%rip),%rdi        # 15c5 <_IO_stdin_used+0x35>
    1354:	b8 00 00 00 00       	mov    $0x0,%eax
    1359:	e8 42 f5 ff ff       	callq  8a0 <printf@plt>
		if(strncmp(md5_string,tmp->md5,32)!=0)
    135e:	48 8b 85 a8 f9 ff ff 	mov    -0x658(%rbp),%rax
    1365:	48 8b 48 10          	mov    0x10(%rax),%rcx
    1369:	48 8b 85 88 f9 ff ff 	mov    -0x678(%rbp),%rax
    1370:	ba 20 00 00 00       	mov    $0x20,%edx
    1375:	48 89 ce             	mov    %rcx,%rsi
    1378:	48 89 c7             	mov    %rax,%rdi
    137b:	e8 c0 f4 ff ff       	callq  840 <strncmp@plt>
    1380:	85 c0                	test   %eax,%eax
    1382:	74 4e                	je     13d2 <main+0x415>
		{
			printf("now done %s %s",key_string,md5_string);
    1384:	48 8b 95 88 f9 ff ff 	mov    -0x678(%rbp),%rdx
    138b:	48 8b 85 80 f9 ff ff 	mov    -0x680(%rbp),%rax
    1392:	48 89 c6             	mov    %rax,%rsi
    1395:	48 8d 3d 29 02 00 00 	lea    0x229(%rip),%rdi        # 15c5 <_IO_stdin_used+0x35>
    139c:	b8 00 00 00 00       	mov    $0x0,%eax
    13a1:	e8 fa f4 ff ff       	callq  8a0 <printf@plt>
			printf("old done %s %s\n",tmp->key_string,tmp->md5);
    13a6:	48 8b 85 a8 f9 ff ff 	mov    -0x658(%rbp),%rax
    13ad:	48 8b 50 10          	mov    0x10(%rax),%rdx
    13b1:	48 8b 85 a8 f9 ff ff 	mov    -0x658(%rbp),%rax
    13b8:	48 8b 40 08          	mov    0x8(%rax),%rax
    13bc:	48 89 c6             	mov    %rax,%rsi
    13bf:	48 8d 3d 0e 02 00 00 	lea    0x20e(%rip),%rdi        # 15d4 <_IO_stdin_used+0x44>
    13c6:	b8 00 00 00 00       	mov    $0x0,%eax
    13cb:	e8 d0 f4 ff ff       	callq  8a0 <printf@plt>
    13d0:	eb 35                	jmp    1407 <main+0x44a>
		}
		else{
			printf("com %d ",strncmp(md5_string,tmp->md5,32));
    13d2:	48 8b 85 a8 f9 ff ff 	mov    -0x658(%rbp),%rax
    13d9:	48 8b 48 10          	mov    0x10(%rax),%rcx
    13dd:	48 8b 85 88 f9 ff ff 	mov    -0x678(%rbp),%rax
    13e4:	ba 20 00 00 00       	mov    $0x20,%edx
    13e9:	48 89 ce             	mov    %rcx,%rsi
    13ec:	48 89 c7             	mov    %rax,%rdi
    13ef:	e8 4c f4 ff ff       	callq  840 <strncmp@plt>
    13f4:	89 c6                	mov    %eax,%esi
    13f6:	48 8d 3d e7 01 00 00 	lea    0x1e7(%rip),%rdi        # 15e4 <_IO_stdin_used+0x54>
    13fd:	b8 00 00 00 00       	mov    $0x0,%eax
    1402:	e8 99 f4 ff ff       	callq  8a0 <printf@plt>
			}
		printf("count %d\n",count);
    1407:	8b 85 60 f9 ff ff    	mov    -0x6a0(%rbp),%eax
    140d:	89 c6                	mov    %eax,%esi
    140f:	48 8d 3d d6 01 00 00 	lea    0x1d6(%rip),%rdi        # 15ec <_IO_stdin_used+0x5c>
    1416:	b8 00 00 00 00       	mov    $0x0,%eax
    141b:	e8 80 f4 ff ff       	callq  8a0 <printf@plt>
		num=0;
    1420:	c7 85 64 f9 ff ff 00 	movl   $0x0,-0x69c(%rbp)
    1427:	00 00 00 
		memset(buf,0,1024);
    142a:	48 8b 85 68 f9 ff ff 	mov    -0x698(%rbp),%rax
    1431:	ba 00 04 00 00       	mov    $0x400,%edx
    1436:	be 00 00 00 00       	mov    $0x0,%esi
    143b:	48 89 c7             	mov    %rax,%rdi
    143e:	e8 6d f4 ff ff       	callq  8b0 <memset@plt>
		memset(key_string,0,512);
    1443:	48 8b 85 80 f9 ff ff 	mov    -0x680(%rbp),%rax
    144a:	ba 00 02 00 00       	mov    $0x200,%edx
    144f:	be 00 00 00 00       	mov    $0x0,%esi
    1454:	48 89 c7             	mov    %rax,%rdi
    1457:	e8 54 f4 ff ff       	callq  8b0 <memset@plt>
		memset(md5_string,0,33);	
    145c:	48 8b 85 88 f9 ff ff 	mov    -0x678(%rbp),%rax
    1463:	ba 21 00 00 00       	mov    $0x21,%edx
    1468:	be 00 00 00 00       	mov    $0x0,%esi
    146d:	48 89 c7             	mov    %rax,%rdi
    1470:	e8 3b f4 ff ff       	callq  8b0 <memset@plt>
	while((read=getline(&buf,&len,check_stream))!=-1){
    1475:	48 8b 95 a0 f9 ff ff 	mov    -0x660(%rbp),%rdx
    147c:	48 8d 8d 70 f9 ff ff 	lea    -0x690(%rbp),%rcx
    1483:	48 8d 85 68 f9 ff ff 	lea    -0x698(%rbp),%rax
    148a:	48 89 ce             	mov    %rcx,%rsi
    148d:	48 89 c7             	mov    %rax,%rdi
    1490:	e8 5b f4 ff ff       	callq  8f0 <getline@plt>
    1495:	48 89 85 98 f9 ff ff 	mov    %rax,-0x668(%rbp)
    149c:	48 83 bd 98 f9 ff ff 	cmpq   $0xffffffffffffffff,-0x668(%rbp)
    14a3:	ff 
    14a4:	0f 85 cd fd ff ff    	jne    1277 <main+0x2ba>
	}

	
	//printf("get done %s %s\n",tmp->key_string,tmp->md5);		

	free(buf);
    14aa:	48 8b 85 68 f9 ff ff 	mov    -0x698(%rbp),%rax
    14b1:	48 89 c7             	mov    %rax,%rdi
    14b4:	e8 67 f3 ff ff       	callq  820 <free@plt>
	free(key_string);
    14b9:	48 8b 85 80 f9 ff ff 	mov    -0x680(%rbp),%rax
    14c0:	48 89 c7             	mov    %rax,%rdi
    14c3:	e8 58 f3 ff ff       	callq  820 <free@plt>
	free(md5_string);
    14c8:	48 8b 85 88 f9 ff ff 	mov    -0x678(%rbp),%rax
    14cf:	48 89 c7             	mov    %rax,%rdi
    14d2:	e8 49 f3 ff ff       	callq  820 <free@plt>
	free(str);	
    14d7:	48 8b 85 78 f9 ff ff 	mov    -0x688(%rbp),%rax
    14de:	48 89 c7             	mov    %rax,%rdi
    14e1:	e8 3a f3 ff ff       	callq  820 <free@plt>
	return 0;
    14e6:	b8 00 00 00 00       	mov    $0x0,%eax
}
    14eb:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    14ef:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    14f6:	00 00 
    14f8:	74 05                	je     14ff <main+0x542>
    14fa:	e8 91 f3 ff ff       	callq  890 <__stack_chk_fail@plt>
    14ff:	c9                   	leaveq 
    1500:	c3                   	retq   
    1501:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    1508:	00 00 00 
    150b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001510 <__libc_csu_init>:
    1510:	41 57                	push   %r15
    1512:	41 56                	push   %r14
    1514:	49 89 d7             	mov    %rdx,%r15
    1517:	41 55                	push   %r13
    1519:	41 54                	push   %r12
    151b:	4c 8d 25 2e 08 20 00 	lea    0x20082e(%rip),%r12        # 201d50 <__frame_dummy_init_array_entry>
    1522:	55                   	push   %rbp
    1523:	48 8d 2d 2e 08 20 00 	lea    0x20082e(%rip),%rbp        # 201d58 <__init_array_end>
    152a:	53                   	push   %rbx
    152b:	41 89 fd             	mov    %edi,%r13d
    152e:	49 89 f6             	mov    %rsi,%r14
    1531:	4c 29 e5             	sub    %r12,%rbp
    1534:	48 83 ec 08          	sub    $0x8,%rsp
    1538:	48 c1 fd 03          	sar    $0x3,%rbp
    153c:	e8 b7 f2 ff ff       	callq  7f8 <_init>
    1541:	48 85 ed             	test   %rbp,%rbp
    1544:	74 20                	je     1566 <__libc_csu_init+0x56>
    1546:	31 db                	xor    %ebx,%ebx
    1548:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    154f:	00 
    1550:	4c 89 fa             	mov    %r15,%rdx
    1553:	4c 89 f6             	mov    %r14,%rsi
    1556:	44 89 ef             	mov    %r13d,%edi
    1559:	41 ff 14 dc          	callq  *(%r12,%rbx,8)
    155d:	48 83 c3 01          	add    $0x1,%rbx
    1561:	48 39 dd             	cmp    %rbx,%rbp
    1564:	75 ea                	jne    1550 <__libc_csu_init+0x40>
    1566:	48 83 c4 08          	add    $0x8,%rsp
    156a:	5b                   	pop    %rbx
    156b:	5d                   	pop    %rbp
    156c:	41 5c                	pop    %r12
    156e:	41 5d                	pop    %r13
    1570:	41 5e                	pop    %r14
    1572:	41 5f                	pop    %r15
    1574:	c3                   	retq   
    1575:	90                   	nop
    1576:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    157d:	00 00 00 

0000000000001580 <__libc_csu_fini>:
    1580:	f3 c3                	repz retq 

Disassembly of section .fini:

0000000000001584 <_fini>:
    1584:	48 83 ec 08          	sub    $0x8,%rsp
    1588:	48 83 c4 08          	add    $0x8,%rsp
    158c:	c3                   	retq   
